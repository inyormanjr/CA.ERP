name: .NET Web API Dev Deploy

on:
  push:
    tags: 
    - 'v*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore CA.ERP.sln
    - name: Build
      run: dotnet build --configuration Release --no-restore CA.ERP.sln
    - name: Test
      run: dotnet test --configuration Release --no-build CA.ERP.sln
    - name: Publish
      run: dotnet publish -o ./release --no-restore   --configuration Release ./CA.ERP.WebApp/CA.ERP.WebApp.csproj 
    - name: Setup Artifact Upload
      uses: actions/upload-artifact@v2
      with:
        name: release-artifact                                
        path: ./release # or path/to/artifact
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: |
        zip -r release${{ github.ref }}.zip ./release
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release
        asset_name: release
        asset_content_type: application/zip
