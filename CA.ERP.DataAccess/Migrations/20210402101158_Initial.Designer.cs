// <auto-generated />
using System;
using CA.ERP.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CA.ERP.DataAccess.Migrations
{
    [DbContext(typeof(CADataContext))]
    [Migration("20210402101158_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int>("BranchNo")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.CardPaymentDetail", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique();

                    b.ToTable("CardPaymentDetails");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.CashPaymentDetail", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Change")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TenderAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("PaymentId");

                    b.ToTable("CashPaymentDetails");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.ChequePaymentDetail", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChequeNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankId");

                    b.HasIndex("ChequeNumber");

                    b.ToTable("ChequePaymentDetails");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CoMaker")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CoMakerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Employer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmployerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstName");

                    b.HasIndex("LastName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.MasterProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Model")
                        .IsUnique();

                    b.ToTable("MasterProducts");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("GrossAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Interest")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("OfficialReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rebate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OfficialReceiptNumber")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Barcode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCostPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("SupplierId");

                    b.HasIndex("BranchId", "Barcode")
                        .IsUnique();

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DeliveredQuantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<decimal>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("FreeQuantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<Guid>("MasterProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("OrderedQuantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PurchaseOrderItemStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCostPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("numeric(10,3)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PurchaseOrderItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StockNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("StockReceiveId")
                        .HasColumnType("uuid");

                    b.Property<int>("StockStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("MasterProductId");

                    b.HasIndex("PurchaseOrderItemId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("StockNumber")
                        .IsUnique();

                    b.HasIndex("StockReceiveId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockCounter", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Code");

                    b.ToTable("StockCounters");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockInventory", b =>
                {
                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.HasKey("BranchId", "MasterProductId");

                    b.HasIndex("MasterProductId");

                    b.ToTable("StockInventories");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockMove", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ChangeQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrentQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<Guid>("MasterProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("MoveCause")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MoveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PreviousQuantity")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StockReceiveId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StockReceiveId");

                    b.HasIndex("BranchId", "MasterProductId");

                    b.ToTable("StockMoves");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockReceive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryReference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("StockSouce")
                        .HasColumnType("integer");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockReceives");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.SupplierBrand", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("SupplierId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("SupplierBrands");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.SupplierMasterProduct", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("SupplierId", "MasterProductId");

                    b.HasIndex("MasterProductId");

                    b.ToTable("SupplierMasterProducts");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("GrossMonthly")
                        .HasColumnType("numeric");

                    b.Property<int>("InterestType")
                        .HasColumnType("integer");

                    b.Property<Guid>("InvenstigatedById")
                        .HasColumnType("uuid");

                    b.Property<decimal>("NetMonthly")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PN")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RebateMonthly")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SalesmanId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("Terms")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRebate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TransactionNumber")
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<decimal>("UDI")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.TransactionProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("DownPayment")
                        .HasColumnType("numeric");

                    b.Property<string>("DownPaymentOfficialReceiptNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionProduct");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.UserBranch", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.CardPaymentDetail", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Bank", "Bank")
                        .WithMany("CardPaymentDetails")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.Payment", "Payment")
                        .WithOne("CardPaymentDetail")
                        .HasForeignKey("CA.ERP.DataAccess.Entities.CardPaymentDetail", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.CashPaymentDetail", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Payment", "Payment")
                        .WithOne("CashPaymentDetail")
                        .HasForeignKey("CA.ERP.DataAccess.Entities.CashPaymentDetail", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.ChequePaymentDetail", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Bank", "Bank")
                        .WithMany("ChequePaymentDetails")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.Payment", "Payment")
                        .WithOne("ChequePaymentDetail")
                        .HasForeignKey("CA.ERP.DataAccess.Entities.ChequePaymentDetail", "PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.MasterProduct", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Brand", "Brand")
                        .WithMany("MasterProducts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Payment", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Transaction", "Transaction")
                        .WithMany("Payments")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.User", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.Branch", "Branch")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Branch");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.MasterProduct", "MasterProduct")
                        .WithMany()
                        .HasForeignKey("MasterProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MasterProduct");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Stock", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Branch", "Branch")
                        .WithMany("Stocks")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.MasterProduct", "MasterProduct")
                        .WithMany("Stocks")
                        .HasForeignKey("MasterProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.PurchaseOrderItem", "PurchaseOrderItem")
                        .WithMany("Stocks")
                        .HasForeignKey("PurchaseOrderItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CA.ERP.DataAccess.Entities.StockReceive", "StockReceive")
                        .WithMany("Stocks")
                        .HasForeignKey("StockReceiveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("MasterProduct");

                    b.Navigation("PurchaseOrderItem");

                    b.Navigation("StockReceive");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockInventory", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Branch", "Branch")
                        .WithMany("StockInventories")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.MasterProduct", "MasterProduct")
                        .WithMany("StockInventories")
                        .HasForeignKey("MasterProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("MasterProduct");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockMove", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.StockReceive", "StockReceive")
                        .WithMany("StockMoves")
                        .HasForeignKey("StockReceiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CA.ERP.DataAccess.Entities.StockInventory", "StockInventory")
                        .WithMany()
                        .HasForeignKey("BranchId", "MasterProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockInventory");

                    b.Navigation("StockReceive");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockReceive", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Branch", "Branch")
                        .WithMany("StockReceives")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StockReceives")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CA.ERP.DataAccess.Entities.Supplier", "Supplier")
                        .WithMany("StockReceives")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.SupplierBrand", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Brand", "Brand")
                        .WithMany("SupplierBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.Supplier", "Supplier")
                        .WithMany("SupplierBrands")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.SupplierMasterProduct", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.MasterProduct", "MasterProduct")
                        .WithMany("SupplierMasterProducts")
                        .HasForeignKey("MasterProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.Supplier", "Supplier")
                        .WithMany("SupplierMasterProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterProduct");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.TransactionProduct", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Transaction", null)
                        .WithMany("Products")
                        .HasForeignKey("TransactionId");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.UserBranch", b =>
                {
                    b.HasOne("CA.ERP.DataAccess.Entities.Branch", "Branch")
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CA.ERP.DataAccess.Entities.User", "User")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Bank", b =>
                {
                    b.Navigation("CardPaymentDetails");

                    b.Navigation("ChequePaymentDetails");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Branch", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("StockInventories");

                    b.Navigation("StockReceives");

                    b.Navigation("Stocks");

                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Brand", b =>
                {
                    b.Navigation("MasterProducts");

                    b.Navigation("SupplierBrands");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.MasterProduct", b =>
                {
                    b.Navigation("StockInventories");

                    b.Navigation("Stocks");

                    b.Navigation("SupplierMasterProducts");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Payment", b =>
                {
                    b.Navigation("CardPaymentDetail");

                    b.Navigation("CashPaymentDetail");

                    b.Navigation("ChequePaymentDetail");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("StockReceives");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.PurchaseOrderItem", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.StockReceive", b =>
                {
                    b.Navigation("StockMoves");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("StockReceives");

                    b.Navigation("SupplierBrands");

                    b.Navigation("SupplierMasterProducts");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.Transaction", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CA.ERP.DataAccess.Entities.User", b =>
                {
                    b.Navigation("UserBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
