@page "/management/user/{id}/edit"

@using CA.ERP.Shared.Dto.Branch;
@using CA.ERP.Shared.Dto.User;
@using CA.ERP.Shared.Dto.Supplier;
@using CA.ERP.Shared.Dto.MasterProduct;
@using CA.ERP.WebApp.Blazor.ViewModels.Management.User;

@layout MainLayout




@inherits ViewBase<UserEditViewModel>

@attribute [Authorize(Roles = "Admin, Manager")]

<MudContainer>
    <MudPaper Class="pa-4">
        <MudGrid>
            <MudItem xs="10">
                <MudText Typo="Typo.h6">Update User</MudText>
            </MudItem>

        </MudGrid>
        @if ((ViewModel.Errors?.Length ?? 0) > 0)
        {
            @foreach (var error in ViewModel.Errors)
            {
                <MudAlert Severity="Severity.Error">@error</MudAlert>
            }
        }
        @if (ViewModel.User == null)
        {
            <MudSkeleton Width="100%" Height="500px"/>
        }
        else
        {
            <EditForm Model="@ViewModel.User" OnValidSubmit="@OnValidSubmit">
                <DataAnnotationsValidator />
                <MudTextField T="string" Label="First Name" @bind-Value="ViewModel.User.FirstName" For="@(() => ViewModel.User.FirstName)" />
                <MudTextField T="string" Label="Last Name" Required="true" RequiredError="Last name is required!" @bind-Value="ViewModel.User.LastName" For="@(() => ViewModel.User.LastName)" />


                <MudSelect T="string" Label="Roles" HelperText="Pick user roles" MultiSelection="true" @bind-SelectedValues="ViewModel.User.Roles">
                    @foreach (var role in ViewModel.Roles)
                    {
                        <MudSelectItem T="string" Value="@role">@role</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="BranchView" Label="Assigned Branches" HelperText="Pick user branches" MultiSelection="true" @bind-SelectedValues="ViewModel.SelectedBranches" ToStringFunc="@(b => b.Name ?? "N/A")">
                    @foreach (var branch in ViewModel.Branches)
                    {
                        <MudSelectItem T="BranchView" Value="branch">@branch.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>

            </EditForm>
        }



    </MudPaper>
</MudContainer>

@code {
    bool success;

    [Parameter]
    public string Id { get; set; }

    private void OnValidSubmit(EditContext context)
    {


        success = true;
        StateHasChanged();

        ViewModel.Submit().ConfigureAwait(false);


    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ViewModel.SetUserIdAsync(Id);
    }



}
