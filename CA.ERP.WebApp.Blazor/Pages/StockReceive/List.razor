@page "/stock-receive/"

@using CA.ERP.Shared.Dto.StockReceive;
@using CA.ERP.Shared.Dto.Supplier;
@using CA.ERP.Shared.Dto.Branch;
@using CA.ERP.WebApp.Blazor.ViewModels.StockReceive;
@using CA.ERP.Common.Types;

@inherits ViewBase<StockReceiveListViewModel>

@inject IDialogService DialogService;


@attribute [Authorize]

<MudContainer>
    <MudPaper Class="d-flex justify-space-between mt-4 pa-4">
        <MudText Typo="Typo.h6">Stock Receive List</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ShowGenerateFromPurchaseOrder" DisableElevation="true">Generate From Purchase Order</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@ShowGenerateFromStockTransfer" DisableElevation="true">Generate From Stock Transfer</MudButton>
    </MudPaper>
    <MudTable Class="mt-8" ServerData="ServerReload" Hover="true" Striped="true" @ref="table">
        <ToolBarContent>
            <MudAutocomplete Class="mx-4" T="BranchView" Label="Branch" @bind-Value="ViewModel.SelectedBranch" SearchFunc="@ViewModel.SearchBranches" ToStringFunc="@(s => s.Name)" ResetValueOnEmptyText="true" CoerceText="true" MaxItems="null" />
            <MudDatePicker Class="mx-4" Label="Date Created" @bind-Date="ViewModel.DateCreated" />
            <MudDatePicker Class="mx-4" Label="Date Received" @bind-Date="ViewModel.DateReceive" />
            <MudSelect Class="mx-4" T="StockSource?" Label="Source" Variant="Variant.Text" @bind-Value="ViewModel.Source" Style="width:124px">
                <MudSelectItem Value="null" T="StockSource?">All</MudSelectItem>
                @foreach (var item in Enum.GetValues(typeof(StockSource)).Cast<StockSource>())
                {
                    <MudSelectItem Value="item" T="StockSource?">@item.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Class="mx-4" T="StockReceiveStage?" Label="Stage" Variant="Variant.Text" @bind-Value="ViewModel.Stage" Style="width:124px">
                <MudSelectItem Value="null" T="StockReceiveStage?">All</MudSelectItem>
                @foreach (var item in Enum.GetValues(typeof(StockReceiveStage)).Cast<StockReceiveStage>())
                {
                    <MudSelectItem Value="item" T="StockReceiveStage?">@item.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Search" OnClick="Search" DisableElevation="true">
                Search
            </MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Branch</MudTh>
            <MudTh>Created At</MudTh>
            <MudTh>Received At</MudTh>
            <MudTh>Delivery Reference</MudTh>
            <MudTh>Source</MudTh>
            <MudTh>Stage</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Branch">@context.BranchName</MudTd>
            <MudTd DataLabel="Created At">@(context.DateCreated.ToString("MMM dd, yyyy")) </MudTd>
            <MudTd DataLabel="Received At">@(context.DateReceived?.ToString("MMM dd, yyyy") ?? "N/A") </MudTd>
            <MudTd DataLabel="Delivery Reference">@(context.DeliveryReference ?? "n/a") </MudTd>
            <MudTd DataLabel="Source">@context.StockSource</MudTd>
            <MudTd DataLabel="Stage">@context.Stage </MudTd>
            <MudTd DataLabel="Action">
                <MudIconButton Icon="@Icons.Outlined.Description" Link="@("/stock-receive/" + context.Id)" />
                <MudIconButton Icon="@Icons.Outlined.Edit" Link="@("/stock-receive/edit/" + context.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />

        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    MudTable<StockReceiveView> table;

    public void ShowGenerateFromPurchaseOrder()
    {
        DialogService.Show<CA.ERP.WebApp.Blazor.Pages.StockReceive.GenerateFromPurchaseOrderDialog>();
    }

    public void ShowGenerateFromStockTransfer()
    {
        DialogService.Show<CA.ERP.WebApp.Blazor.Pages.StockReceive.GenerateFromStockTransferDialog>();
    }

    public async Task Search()
    {
        table.CurrentPage = 0;
        await table.ReloadServerData();
    }

    private async Task<TableData<StockReceiveView>> ServerReload(TableState state)
    {
        var paginatedStockRecieves = await ViewModel.SearchStockReceivesAsync(state.Page, state.PageSize);
        return new TableData<StockReceiveView>() { TotalItems = paginatedStockRecieves.TotalCount, Items = paginatedStockRecieves.Data };
    }


}
