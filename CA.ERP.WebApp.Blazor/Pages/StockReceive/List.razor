@page "/stock-receive/"

@using CA.ERP.Shared.Dto.StockReceive;
@using CA.ERP.WebApp.Blazor.ViewModels.StockReceive;

@inherits ViewBase<StockReceiveListViewModel>

@inject IDialogService DialogService;


@attribute [Authorize]

<MudContainer>
    <MudPaper Class="mt-4 pa-4">
        <MudText Typo="Typo.h6">Stock Receivces</MudText>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudGrid>

                </MudGrid>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudGrid>
                    <MudItem xs="12"><MudButton OnClick="@ShowGenerateFromPurchaseOrder">Generate</MudButton></MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
    <MudTable Class="mt-8" ServerData="ServerReload" Hover="true" Striped="true"  >

        <HeaderContent>
            <MudTh>Branch</MudTh>
            <MudTh>Supplier</MudTh>
            <MudTh>Source</MudTh>
            <MudTh>Date Receive</MudTh>
            <MudTh>Delivery Reference</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Branch">@context.BranchName</MudTd>
            <MudTd DataLabel="Supplier">@context.SupplierName</MudTd>
            <MudTd DataLabel="Source">@context.StockSource</MudTd>
            <MudTd DataLabel="Delivery Date">@(context.DateReceived?.ToString("MMM dd, yyyy") ?? "N/A") </MudTd>
            <MudTd DataLabel="Delivery Reference">@(context.DeliveryReference ?? "n/a") </MudTd>
            <MudTd DataLabel="Action">
                <MudIconButton Icon="@Icons.Outlined.Edit" Link="@("/stock-receive/edit/" + context.Id)" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />

        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    public void ShowGenerateFromPurchaseOrder()
    {
        DialogService.Show<CA.ERP.WebApp.Blazor.Pages.StockReceive.GenerateFromPurchaseOrderDialog>();
    }

    private async Task<TableData<StockReceiveView>> ServerReload(TableState state)
    {
        var paginatedStockRecieves = await ViewModel.SearchStockReceivesAsync(state.Page, state.PageSize);
        return new TableData<StockReceiveView>() { TotalItems = paginatedStockRecieves.TotalCount, Items = paginatedStockRecieves.Data };
    }
}
