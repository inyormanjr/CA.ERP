
@using CA.ERP.Shared.Dto.StockReceive;
@using CA.ERP.Shared.Dto.Branch;
@using CA.ERP.Shared.Dto.PurchaseOrder;
@using CA.ERP.WebApp.Blazor.ViewModels.StockReceive;

@inherits ViewBase<GenerateFromPurchaseOrderDialogViewModel>

@attribute [Authorize]
<MudDialog>
    <DialogContent>
        <MudContainer>
            <MudText Typo="Typo.h6">Purchase Orders</MudText>
            <MudAutocomplete T="BranchView" Label="Branch" @bind-Value="ViewModel.SelectedBranch" SearchFunc="@ViewModel.SearchBranches" ToStringFunc="@(b => b.Name)" ResetValueOnEmptyText="true" CoerceText="true" MaxItems="null" />
            <MudAutocomplete @ref="purchaseOrderAutoComplete" T="PurchaseOrderView" Label="Purchase Order" @bind-Value="ViewModel.SelectedPurchaseOrder" SearchFunc="@ViewModel.SearchPurchaseOrders" ToStringFunc="@(b => b.Barcode)" ResetValueOnEmptyText="true" CoerceText="true" MaxItems="null" />

            @if (ViewModel.IsSaving)
            {
                <div class="d-flex justify-center py-2 px-1 mt-4">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>

            }
            else
            {
                <MudButton Class="mt-4" FullWidth="true" Color="Color.Primary" Variant="Variant.Filled" Command="@ViewModel.GenerateAsyncCommand" Disabled="@(!ViewModel.GenerateAsyncCommand.CanExecute(ViewModel.SelectedPurchaseOrder))">
                    <MudText>Generate</MudText>
                </MudButton>
            }

        </MudContainer>
    </DialogContent>
    <DialogActions>

    </DialogActions>
</MudDialog>

@code {
    MudAutocomplete<PurchaseOrderView> purchaseOrderAutoComplete;

    public override void PropertyChanged(string propertyName)
    {
        if (nameof(ViewModel.SelectedBranch) == propertyName)
        {
            purchaseOrderAutoComplete.Reset();
        }
    }
}
